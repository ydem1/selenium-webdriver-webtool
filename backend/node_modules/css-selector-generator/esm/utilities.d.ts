import { CssSelectorGeneratorOptions, CssSelectorGeneratorOptionsInput, CssSelectorsByType, CssSelectorType } from "./types.js";
/**
 * Returns closest parent element that is common for all needle elements. Returns `null` if no such element exists.
 */
export declare function getCommonParent(needle: Element[]): HTMLElement;
/**
 * Yields all common parents of the needle, starting with the one closest to the needle.
 */
export declare function parentsGenerator(needle: Element[], root: ParentNode): Generator<HTMLElement, void, unknown>;
/**
 * Yields all parents of the needle that when used as a root for selector, will only match the needle.
 */
export declare function viableParentsGenerator(needle: Element[], needleSelector: string, root?: ParentNode): Generator<HTMLElement, void, unknown>;
/**
 * Check whether needle selector within this parent will match only the needle.
 */
export declare function testParentCandidate(needle: Element, needleSelector: string, parent: ParentNode): boolean;
export declare function getSelectorDataPowerSet(selectorData: CssSelectorsByType): {
    [k: string]: string[][];
};
export declare function needleCandidateGenerator(needle: Element[], selectorTypes: CssSelectorType[], options: CssSelectorGeneratorOptions, memo?: import("./memo.js").MemoizedSelectorGetter): Generator<string, void, unknown>;
export declare function needleSelectorGenerator(needle: Element[], selectorTypes: CssSelectorType[], options: CssSelectorGeneratorOptions, memo?: import("./memo.js").MemoizedSelectorGetter): Generator<never, void, unknown>;
export declare function viableSelectorGenerator(): Generator<never, void, unknown>;
export declare function cssSelectorGenerator(originalNeedle: unknown, originalOptions?: CssSelectorGeneratorOptionsInput): Generator<string, void, unknown>;
